<!-- Если не устанавливается папка VENDOR: прописать в php.ini файл extension=php_fileinfo.dll -->
Сборка пакета:
  - php composer.phar install
  - npm i

Команды:
    <!-- установить COMPOSER -->
        php -r "copy('https://getcomposer.org/installer', 'composer-setup.php');"
        php -r "if (hash_file('sha384', 'composer-setup.php') === '55ce33d7678c5a611085589f1f3ddf8b3c52d662cd01d4ba75c0ee0459970c2200a51f492d557530c71c15d8dba01eae') { echo 'Installer verified'; } else { echo 'Installer corrupt'; unlink('composer-setup.php'); } echo PHP_EOL;"
        php composer-setup.php
        php -r "unlink('composer-setup.php');"
    <!-- установить LARAVEL -->
        php composer.phar create-project laravel/laravel blog 9
    <!-- команды: -->
        php artisan         | получение списка команд
        php artisan serve   | запуск сервера
        php -S localhost:8000 -t public | сервер запускать при помощи данной команды  (иначе стили не подцепляются)
                                          Просто устанавливается собственный сервер php по адресу -S с начальной точкой (корнем) в -t . 
                                          Это помогает при работе с абсолютными путями лучше, чем у artisan-сервера.
        php artisan make:controller StaticController | создание контроллера
    <!-- команды для работы с CSS и JS: -->
        Для того, чтобы этот CSS- файл был скомпилирован, сжат и перемещен в папку public необходимо:
            - в файле package.json установить необходимые библиотеки (npm install или npm i). Не забываем скачать и установить NODE.JS
            - появятся: папка node_modules и файл package-lock.json
            - npm run dev (сборка. Команды прописаны в файле package.json)
            - сервер запускать при помощи команды php -S localhost:8000 -t public (иначе стили не подцепляются)
              Просто устанавливается собственный сервер php по адресу -S с начальной точкой (корнем) в -t . 
              Это помогает при работе с абсолютными путями лучше, чем у artisan-сервера.
<!-- Parth_02 -->
    <!-- Создание таблицы БД -->
    - php artisan make:controller ArticlesController | Создадим простой контроллер для статей
    - php artisan make:model Article -m | Создадим модель (таблицу) вместе с файлом миграций
      Потом в файле миграций указываем необходимые поля для данных
    - в файле .env прописываем данные для доступа к БД
    - в файле AppServiceProvider.php прописываем use Illuminate\Support\Facades\Schema;
      специальный класс с помощью которого мы можем прописывать новые настройки для наших таблиц и полей
      в функции public function boot() | Schema::defaultStringLength(170)
    - php artisan migrate |выполнение миграций
    - php artisan migrate:rollback --step=1 |откат одной последней миграции
    - php artisan tinker | добавление значений в БД
        > $article = new App\Models\Article()
        > $article->title = "First post";
        > $article->anons = "Anons for firstt article"; 
        > $article->text = "Full text for first article";
        > $article->save();
      чтобы значения добавились нужно отключить временные метки timestamps() - в файле модели прописать public $timestamps = false;
    <!-- Получение данных из БД -->
    php artisan make:controller ArticlesController --resource | Создадим контроллер для работы с БД
    php artisan route:list | показывает все отслеживаемые адреса
      - для получения данных обращаемся к нужной модели и вызываем необходимый метод
    <!-- Получение данных из БД -->
    - php composer.phar require laravelcollective/html | установка библиотеки laravelcollective для работы с формами
      пример формочки смотри create.blade.php